"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winston_1 = require("winston");
const console_1 = require("./transport/console");
const sentry_1 = require("./transport/sentry");
const slack_1 = require("./transport/slack");
const logstash_1 = require("./transport/logstash");
var AVAILABLE_TRANSFORMS;
(function (AVAILABLE_TRANSFORMS) {
    AVAILABLE_TRANSFORMS["SENTRY"] = "SENTRY";
    AVAILABLE_TRANSFORMS["SLACK"] = "SLACK";
    AVAILABLE_TRANSFORMS["CONSOLE"] = "CONSOLE";
    AVAILABLE_TRANSFORMS["LOGSTASH"] = "LOGSTASH";
})(AVAILABLE_TRANSFORMS || (AVAILABLE_TRANSFORMS = {}));
exports.AVAILABLE_TRANSFORMS = AVAILABLE_TRANSFORMS;
const winston = {
    create: (configs, defaultMeta = {}) => {
        const transports = [];
        const exceptionHandlers = [];
        configs = configs || [];
        for (const trType of Object.keys(AVAILABLE_TRANSFORMS)) {
            const cfg = configs.find(o => o.transportType === trType);
            if (!cfg)
                continue;
            let newTransform;
            switch (cfg.transportType) {
                case AVAILABLE_TRANSFORMS.SENTRY:
                    newTransform = sentry_1.sentryTransport.create(cfg.options, defaultMeta);
                    break;
                case AVAILABLE_TRANSFORMS.SLACK:
                    newTransform = slack_1.slackTransport.create(cfg.options);
                    break;
                case AVAILABLE_TRANSFORMS.LOGSTASH:
                    newTransform = logstash_1.logstashTransport.create(cfg.options);
                    break;
                case AVAILABLE_TRANSFORMS.CONSOLE:
                    newTransform = console_1.consoleTransport.create(cfg.options);
                    exceptionHandlers.push(newTransform);
                    break;
                default:
                    continue;
            }
            transports.push(newTransform);
        }
        return winston_1.createLogger({
            transports,
            exceptionHandlers,
            defaultMeta,
        });
    },
};
exports.winston = winston;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luc3Rvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvd2luc3Rvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QztBQUM5QyxpREFBc0Q7QUFDdEQsK0NBQW9EO0FBQ3BELDZDQUFrRDtBQUVsRCxtREFBd0Q7QUFFeEQsSUFBSyxvQkFLSjtBQUxELFdBQUssb0JBQW9CO0lBQ3ZCLHlDQUFpQixDQUFBO0lBQ2pCLHVDQUFlLENBQUE7SUFDZiwyQ0FBbUIsQ0FBQTtJQUNuQiw2Q0FBcUIsQ0FBQTtBQUN2QixDQUFDLEVBTEksb0JBQW9CLEtBQXBCLG9CQUFvQixRQUt4QjtBQXdDaUIsb0RBQW9CO0FBdEN0QyxNQUFNLE9BQU8sR0FBRztJQUNkLE1BQU0sRUFBRSxDQUFDLE9BQWtDLEVBQUUsY0FBbUIsRUFBRSxFQUFVLEVBQUU7UUFDNUUsTUFBTSxVQUFVLEdBQVEsRUFBRSxDQUFBO1FBQzFCLE1BQU0saUJBQWlCLEdBQVEsRUFBRSxDQUFBO1FBQ2pDLE9BQU8sR0FBRyxPQUFPLElBQUksRUFBRSxDQUFBO1FBRXZCLEtBQUssTUFBTSxNQUFNLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxFQUFFO1lBQ3RELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxLQUFLLE1BQU0sQ0FBQyxDQUFBO1lBQ3pELElBQUksQ0FBQyxHQUFHO2dCQUFFLFNBQVE7WUFFbEIsSUFBSSxZQUFZLENBQUE7WUFDaEIsUUFBUSxHQUFHLENBQUMsYUFBYSxFQUFFO2dCQUN6QixLQUFLLG9CQUFvQixDQUFDLE1BQU07b0JBQzlCLFlBQVksR0FBRyx3QkFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFBO29CQUMvRCxNQUFLO2dCQUNQLEtBQUssb0JBQW9CLENBQUMsS0FBSztvQkFDN0IsWUFBWSxHQUFHLHNCQUFjLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQTtvQkFDakQsTUFBSztnQkFDUCxLQUFLLG9CQUFvQixDQUFDLFFBQVE7b0JBQ2hDLFlBQVksR0FBRyw0QkFBaUIsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQWMsQ0FBQyxDQUFBO29CQUMzRCxNQUFLO2dCQUNQLEtBQUssb0JBQW9CLENBQUMsT0FBTztvQkFDL0IsWUFBWSxHQUFHLDBCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7b0JBQ25ELGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtvQkFDcEMsTUFBSztnQkFDUDtvQkFDRSxTQUFRO2FBQ1g7WUFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQzlCO1FBRUQsT0FBTyxzQkFBWSxDQUFDO1lBQ2xCLFVBQVU7WUFDVixpQkFBaUI7WUFDakIsV0FBVztTQUNaLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFBO0FBQ1EsMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMb2dnZXIsIExvZ2dlciB9IGZyb20gJ3dpbnN0b24nXG5pbXBvcnQgeyBjb25zb2xlVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQvY29uc29sZSdcbmltcG9ydCB7IHNlbnRyeVRyYW5zcG9ydCB9IGZyb20gJy4vdHJhbnNwb3J0L3NlbnRyeSdcbmltcG9ydCB7IHNsYWNrVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQvc2xhY2snXG5pbXBvcnQgeyBXaW5zdG9uVHJhbnNwb3J0Q29uZmlnIH0gZnJvbSAnLi4vdXRpbC9jdXN0b21UeXBpbmdzJ1xuaW1wb3J0IHsgbG9nc3Rhc2hUcmFuc3BvcnQgfSBmcm9tICcuL3RyYW5zcG9ydC9sb2dzdGFzaCdcblxuZW51bSBBVkFJTEFCTEVfVFJBTlNGT1JNUyB7XG4gIFNFTlRSWSA9ICdTRU5UUlknLFxuICBTTEFDSyA9ICdTTEFDSycsXG4gIENPTlNPTEUgPSAnQ09OU09MRScsXG4gIExPR1NUQVNIID0gJ0xPR1NUQVNIJyxcbn1cblxuY29uc3Qgd2luc3RvbiA9IHtcbiAgY3JlYXRlOiAoY29uZmlncz86IFdpbnN0b25UcmFuc3BvcnRDb25maWdbXSwgZGVmYXVsdE1ldGE6IGFueSA9IHt9KTogTG9nZ2VyID0+IHtcbiAgICBjb25zdCB0cmFuc3BvcnRzOiBhbnkgPSBbXVxuICAgIGNvbnN0IGV4Y2VwdGlvbkhhbmRsZXJzOiBhbnkgPSBbXVxuICAgIGNvbmZpZ3MgPSBjb25maWdzIHx8IFtdXG5cbiAgICBmb3IgKGNvbnN0IHRyVHlwZSBvZiBPYmplY3Qua2V5cyhBVkFJTEFCTEVfVFJBTlNGT1JNUykpIHtcbiAgICAgIGNvbnN0IGNmZyA9IGNvbmZpZ3MuZmluZChvID0+IG8udHJhbnNwb3J0VHlwZSA9PT0gdHJUeXBlKVxuICAgICAgaWYgKCFjZmcpIGNvbnRpbnVlXG5cbiAgICAgIGxldCBuZXdUcmFuc2Zvcm1cbiAgICAgIHN3aXRjaCAoY2ZnLnRyYW5zcG9ydFR5cGUpIHtcbiAgICAgICAgY2FzZSBBVkFJTEFCTEVfVFJBTlNGT1JNUy5TRU5UUlk6XG4gICAgICAgICAgbmV3VHJhbnNmb3JtID0gc2VudHJ5VHJhbnNwb3J0LmNyZWF0ZShjZmcub3B0aW9ucywgZGVmYXVsdE1ldGEpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBBVkFJTEFCTEVfVFJBTlNGT1JNUy5TTEFDSzpcbiAgICAgICAgICBuZXdUcmFuc2Zvcm0gPSBzbGFja1RyYW5zcG9ydC5jcmVhdGUoY2ZnLm9wdGlvbnMpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBBVkFJTEFCTEVfVFJBTlNGT1JNUy5MT0dTVEFTSDpcbiAgICAgICAgICBuZXdUcmFuc2Zvcm0gPSBsb2dzdGFzaFRyYW5zcG9ydC5jcmVhdGUoY2ZnLm9wdGlvbnMgYXMgYW55KVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgQVZBSUxBQkxFX1RSQU5TRk9STVMuQ09OU09MRTpcbiAgICAgICAgICBuZXdUcmFuc2Zvcm0gPSBjb25zb2xlVHJhbnNwb3J0LmNyZWF0ZShjZmcub3B0aW9ucylcbiAgICAgICAgICBleGNlcHRpb25IYW5kbGVycy5wdXNoKG5ld1RyYW5zZm9ybSlcbiAgICAgICAgICBicmVha1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG4gICAgICB0cmFuc3BvcnRzLnB1c2gobmV3VHJhbnNmb3JtKVxuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVMb2dnZXIoe1xuICAgICAgdHJhbnNwb3J0cyxcbiAgICAgIGV4Y2VwdGlvbkhhbmRsZXJzLFxuICAgICAgZGVmYXVsdE1ldGEsXG4gICAgfSlcbiAgfSxcbn1cbmV4cG9ydCB7IHdpbnN0b24sIEFWQUlMQUJMRV9UUkFOU0ZPUk1TfVxuIl19