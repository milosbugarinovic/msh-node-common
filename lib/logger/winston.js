"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winston_1 = require("winston");
const console_1 = require("./transport/console");
const sentry_1 = require("./transport/sentry");
const slack_1 = require("./transport/slack");
const logstash_1 = require("./transport/logstash");
const elsaticsearch_1 = require("./transport/elsaticsearch");
var AVAILABLE_TRANSFORMS;
(function (AVAILABLE_TRANSFORMS) {
    AVAILABLE_TRANSFORMS["SENTRY"] = "SENTRY";
    AVAILABLE_TRANSFORMS["SLACK"] = "SLACK";
    AVAILABLE_TRANSFORMS["CONSOLE"] = "CONSOLE";
    AVAILABLE_TRANSFORMS["LOGSTASH"] = "LOGSTASH";
    AVAILABLE_TRANSFORMS["ELASTIC_SEARCH"] = "ELASTIC_SEARCH";
})(AVAILABLE_TRANSFORMS || (AVAILABLE_TRANSFORMS = {}));
exports.AVAILABLE_TRANSFORMS = AVAILABLE_TRANSFORMS;
const winston = {
    create: (configs, defaultMeta = {}) => {
        const transports = [];
        const exceptionHandlers = [];
        configs = configs || [];
        for (const trType of Object.keys(AVAILABLE_TRANSFORMS)) {
            const cfg = configs.find(o => o.transportType === trType);
            if (!cfg)
                continue;
            let newTransform;
            switch (cfg.transportType) {
                case AVAILABLE_TRANSFORMS.SENTRY:
                    newTransform = sentry_1.sentryTransport.create(cfg.options, defaultMeta);
                    break;
                case AVAILABLE_TRANSFORMS.SLACK:
                    newTransform = slack_1.slackTransport.create(cfg.options);
                    break;
                case AVAILABLE_TRANSFORMS.LOGSTASH:
                    newTransform = logstash_1.logstashTransport.create(cfg.options);
                    break;
                case AVAILABLE_TRANSFORMS.ELASTIC_SEARCH:
                    newTransform = elsaticsearch_1.elasticSearchTransport.create(cfg.options);
                    break;
                case AVAILABLE_TRANSFORMS.CONSOLE:
                    newTransform = console_1.consoleTransport.create(cfg.options);
                    exceptionHandlers.push(newTransform);
                    break;
                default:
                    continue;
            }
            transports.push(newTransform);
        }
        return winston_1.createLogger({
            transports,
            exceptionHandlers,
            defaultMeta,
        });
    },
};
exports.winston = winston;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luc3Rvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvd2luc3Rvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QztBQUM5QyxpREFBc0Q7QUFDdEQsK0NBQW9EO0FBQ3BELDZDQUFrRDtBQU9sRCxtREFBd0Q7QUFDeEQsNkRBQWtFO0FBRWxFLElBQUssb0JBTUo7QUFORCxXQUFLLG9CQUFvQjtJQUN2Qix5Q0FBaUIsQ0FBQTtJQUNqQix1Q0FBZSxDQUFBO0lBQ2YsMkNBQW1CLENBQUE7SUFDbkIsNkNBQXFCLENBQUE7SUFDckIseURBQWdDLENBQUE7QUFDbEMsQ0FBQyxFQU5JLG9CQUFvQixLQUFwQixvQkFBb0IsUUFNeEI7QUEyQ2lCLG9EQUFvQjtBQXpDdEMsTUFBTSxPQUFPLEdBQUc7SUFDZCxNQUFNLEVBQUUsQ0FBQyxPQUFrQyxFQUFFLGNBQW1CLEVBQUUsRUFBVSxFQUFFO1FBQzVFLE1BQU0sVUFBVSxHQUFRLEVBQUUsQ0FBQTtRQUMxQixNQUFNLGlCQUFpQixHQUFRLEVBQUUsQ0FBQTtRQUNqQyxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQTtRQUV2QixLQUFLLE1BQU0sTUFBTSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsRUFBRTtZQUN0RCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsS0FBSyxNQUFNLENBQUMsQ0FBQTtZQUN6RCxJQUFJLENBQUMsR0FBRztnQkFBRSxTQUFRO1lBRWxCLElBQUksWUFBWSxDQUFBO1lBQ2hCLFFBQVEsR0FBRyxDQUFDLGFBQWEsRUFBRTtnQkFDekIsS0FBSyxvQkFBb0IsQ0FBQyxNQUFNO29CQUM5QixZQUFZLEdBQUcsd0JBQWUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQTtvQkFDL0QsTUFBSztnQkFDUCxLQUFLLG9CQUFvQixDQUFDLEtBQUs7b0JBQzdCLFlBQVksR0FBRyxzQkFBYyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBZ0MsQ0FBQyxDQUFBO29CQUMxRSxNQUFLO2dCQUNQLEtBQUssb0JBQW9CLENBQUMsUUFBUTtvQkFDaEMsWUFBWSxHQUFHLDRCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBbUMsQ0FBQyxDQUFBO29CQUNoRixNQUFLO2dCQUNQLEtBQUssb0JBQW9CLENBQUMsY0FBYztvQkFDdEMsWUFBWSxHQUFHLHNDQUFzQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBd0MsQ0FBQyxDQUFBO29CQUMxRixNQUFLO2dCQUNQLEtBQUssb0JBQW9CLENBQUMsT0FBTztvQkFDL0IsWUFBWSxHQUFHLDBCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7b0JBQ25ELGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtvQkFDcEMsTUFBSztnQkFDUDtvQkFDRSxTQUFRO2FBQ1g7WUFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQzlCO1FBRUQsT0FBTyxzQkFBWSxDQUFDO1lBQ2xCLFVBQVU7WUFDVixpQkFBaUI7WUFDakIsV0FBVztTQUNaLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFBO0FBQ1EsMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMb2dnZXIsIExvZ2dlciB9IGZyb20gJ3dpbnN0b24nXG5pbXBvcnQgeyBjb25zb2xlVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQvY29uc29sZSdcbmltcG9ydCB7IHNlbnRyeVRyYW5zcG9ydCB9IGZyb20gJy4vdHJhbnNwb3J0L3NlbnRyeSdcbmltcG9ydCB7IHNsYWNrVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQvc2xhY2snXG5pbXBvcnQge1xuICBFbGFzdGljU2VhcmNoVHJhbnNwb3J0T3B0aW9ucyxcbiAgTG9nc3Rhc2hUcmFuc3BvcnRPcHRpb25zLFxuICBTbGFja1RyYW5zcG9ydE9wdGlvbnMsXG4gIFdpbnN0b25UcmFuc3BvcnRDb25maWcsXG59IGZyb20gJy4uL3V0aWwvY3VzdG9tVHlwaW5ncydcbmltcG9ydCB7IGxvZ3N0YXNoVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQvbG9nc3Rhc2gnXG5pbXBvcnQgeyBlbGFzdGljU2VhcmNoVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQvZWxzYXRpY3NlYXJjaCdcblxuZW51bSBBVkFJTEFCTEVfVFJBTlNGT1JNUyB7XG4gIFNFTlRSWSA9ICdTRU5UUlknLFxuICBTTEFDSyA9ICdTTEFDSycsXG4gIENPTlNPTEUgPSAnQ09OU09MRScsXG4gIExPR1NUQVNIID0gJ0xPR1NUQVNIJyxcbiAgRUxBU1RJQ19TRUFSQ0g9ICdFTEFTVElDX1NFQVJDSCcsXG59XG5cbmNvbnN0IHdpbnN0b24gPSB7XG4gIGNyZWF0ZTogKGNvbmZpZ3M/OiBXaW5zdG9uVHJhbnNwb3J0Q29uZmlnW10sIGRlZmF1bHRNZXRhOiBhbnkgPSB7fSk6IExvZ2dlciA9PiB7XG4gICAgY29uc3QgdHJhbnNwb3J0czogYW55ID0gW11cbiAgICBjb25zdCBleGNlcHRpb25IYW5kbGVyczogYW55ID0gW11cbiAgICBjb25maWdzID0gY29uZmlncyB8fCBbXVxuXG4gICAgZm9yIChjb25zdCB0clR5cGUgb2YgT2JqZWN0LmtleXMoQVZBSUxBQkxFX1RSQU5TRk9STVMpKSB7XG4gICAgICBjb25zdCBjZmcgPSBjb25maWdzLmZpbmQobyA9PiBvLnRyYW5zcG9ydFR5cGUgPT09IHRyVHlwZSlcbiAgICAgIGlmICghY2ZnKSBjb250aW51ZVxuXG4gICAgICBsZXQgbmV3VHJhbnNmb3JtXG4gICAgICBzd2l0Y2ggKGNmZy50cmFuc3BvcnRUeXBlKSB7XG4gICAgICAgIGNhc2UgQVZBSUxBQkxFX1RSQU5TRk9STVMuU0VOVFJZOlxuICAgICAgICAgIG5ld1RyYW5zZm9ybSA9IHNlbnRyeVRyYW5zcG9ydC5jcmVhdGUoY2ZnLm9wdGlvbnMsIGRlZmF1bHRNZXRhKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgQVZBSUxBQkxFX1RSQU5TRk9STVMuU0xBQ0s6XG4gICAgICAgICAgbmV3VHJhbnNmb3JtID0gc2xhY2tUcmFuc3BvcnQuY3JlYXRlKGNmZy5vcHRpb25zIGFzIFNsYWNrVHJhbnNwb3J0T3B0aW9ucylcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIEFWQUlMQUJMRV9UUkFOU0ZPUk1TLkxPR1NUQVNIOlxuICAgICAgICAgIG5ld1RyYW5zZm9ybSA9IGxvZ3N0YXNoVHJhbnNwb3J0LmNyZWF0ZShjZmcub3B0aW9ucyBhcyBMb2dzdGFzaFRyYW5zcG9ydE9wdGlvbnMpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBBVkFJTEFCTEVfVFJBTlNGT1JNUy5FTEFTVElDX1NFQVJDSDpcbiAgICAgICAgICBuZXdUcmFuc2Zvcm0gPSBlbGFzdGljU2VhcmNoVHJhbnNwb3J0LmNyZWF0ZShjZmcub3B0aW9ucyBhcyBFbGFzdGljU2VhcmNoVHJhbnNwb3J0T3B0aW9ucylcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIEFWQUlMQUJMRV9UUkFOU0ZPUk1TLkNPTlNPTEU6XG4gICAgICAgICAgbmV3VHJhbnNmb3JtID0gY29uc29sZVRyYW5zcG9ydC5jcmVhdGUoY2ZnLm9wdGlvbnMpXG4gICAgICAgICAgZXhjZXB0aW9uSGFuZGxlcnMucHVzaChuZXdUcmFuc2Zvcm0pXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgdHJhbnNwb3J0cy5wdXNoKG5ld1RyYW5zZm9ybSlcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlTG9nZ2VyKHtcbiAgICAgIHRyYW5zcG9ydHMsXG4gICAgICBleGNlcHRpb25IYW5kbGVycyxcbiAgICAgIGRlZmF1bHRNZXRhLFxuICAgIH0pXG4gIH0sXG59XG5leHBvcnQgeyB3aW5zdG9uLCBBVkFJTEFCTEVfVFJBTlNGT1JNU31cbiJdfQ==