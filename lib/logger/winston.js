"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const winston_1 = require("winston");
const console_1 = require("./transport/console");
const sentry_1 = require("./transport/sentry");
const slack_1 = require("./transport/slack");
var AVAILABLE_TRANSFORMS;
(function (AVAILABLE_TRANSFORMS) {
    AVAILABLE_TRANSFORMS["SENTRY"] = "SENTRY";
    AVAILABLE_TRANSFORMS["SLACK"] = "SLACK";
    AVAILABLE_TRANSFORMS["CONSOLE"] = "CONSOLE";
})(AVAILABLE_TRANSFORMS || (AVAILABLE_TRANSFORMS = {}));
exports.AVAILABLE_TRANSFORMS = AVAILABLE_TRANSFORMS;
const winston = {
    create: (configs, defaultMeta = {}) => {
        const transports = [];
        const exceptionHandlers = [];
        configs = configs || [];
        for (const trType of Object.keys(AVAILABLE_TRANSFORMS)) {
            const cfg = configs.find(o => o.transportType === trType);
            if (!cfg)
                continue;
            let newTransform;
            switch (cfg.transportType) {
                case AVAILABLE_TRANSFORMS.SENTRY:
                    newTransform = sentry_1.sentryTransport.create(cfg.options, defaultMeta);
                    break;
                case AVAILABLE_TRANSFORMS.SLACK:
                    newTransform = slack_1.slackTransport.create(cfg.options);
                    break;
                case AVAILABLE_TRANSFORMS.CONSOLE:
                    newTransform = console_1.consoleTransport.create(cfg.options);
                    exceptionHandlers.push(newTransform);
                    break;
                default:
                    continue;
            }
            transports.push(newTransform);
        }
        return winston_1.createLogger({
            transports,
            exceptionHandlers,
            defaultMeta,
        });
    },
};
exports.winston = winston;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luc3Rvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9sb2dnZXIvd2luc3Rvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHFDQUE4QztBQUM5QyxpREFBc0Q7QUFDdEQsK0NBQW9EO0FBQ3BELDZDQUFrRDtBQUdsRCxJQUFLLG9CQUlKO0FBSkQsV0FBSyxvQkFBb0I7SUFDdkIseUNBQWlCLENBQUE7SUFDakIsdUNBQWUsQ0FBQTtJQUNmLDJDQUFtQixDQUFBO0FBQ3JCLENBQUMsRUFKSSxvQkFBb0IsS0FBcEIsb0JBQW9CLFFBSXhCO0FBcUNpQixvREFBb0I7QUFuQ3RDLE1BQU0sT0FBTyxHQUFHO0lBQ2QsTUFBTSxFQUFFLENBQUMsT0FBa0MsRUFBRSxjQUFtQixFQUFFLEVBQVUsRUFBRTtRQUM1RSxNQUFNLFVBQVUsR0FBUSxFQUFFLENBQUE7UUFDMUIsTUFBTSxpQkFBaUIsR0FBUSxFQUFFLENBQUE7UUFDakMsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUE7UUFFdkIsS0FBSyxNQUFNLE1BQU0sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUU7WUFDdEQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLEtBQUssTUFBTSxDQUFDLENBQUE7WUFDekQsSUFBSSxDQUFDLEdBQUc7Z0JBQUUsU0FBUTtZQUVsQixJQUFJLFlBQVksQ0FBQTtZQUNoQixRQUFRLEdBQUcsQ0FBQyxhQUFhLEVBQUU7Z0JBQ3pCLEtBQUssb0JBQW9CLENBQUMsTUFBTTtvQkFDOUIsWUFBWSxHQUFHLHdCQUFlLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUE7b0JBQy9ELE1BQUs7Z0JBQ1AsS0FBSyxvQkFBb0IsQ0FBQyxLQUFLO29CQUM3QixZQUFZLEdBQUcsc0JBQWMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO29CQUNqRCxNQUFLO2dCQUNQLEtBQUssb0JBQW9CLENBQUMsT0FBTztvQkFDL0IsWUFBWSxHQUFHLDBCQUFnQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7b0JBQ25ELGlCQUFpQixDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtvQkFDcEMsTUFBSztnQkFDUDtvQkFDRSxTQUFRO2FBQ1g7WUFDRCxVQUFVLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQzlCO1FBRUQsT0FBTyxzQkFBWSxDQUFDO1lBQ2xCLFVBQVU7WUFDVixpQkFBaUI7WUFDakIsV0FBVztTQUNaLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FDRixDQUFBO0FBQ1EsMEJBQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVMb2dnZXIsIExvZ2dlciB9IGZyb20gJ3dpbnN0b24nXG5pbXBvcnQgeyBjb25zb2xlVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQvY29uc29sZSdcbmltcG9ydCB7IHNlbnRyeVRyYW5zcG9ydCB9IGZyb20gJy4vdHJhbnNwb3J0L3NlbnRyeSdcbmltcG9ydCB7IHNsYWNrVHJhbnNwb3J0IH0gZnJvbSAnLi90cmFuc3BvcnQvc2xhY2snXG5pbXBvcnQgeyBXaW5zdG9uVHJhbnNwb3J0Q29uZmlnIH0gZnJvbSAnLi4vdXRpbC9jdXN0b21UeXBpbmdzJ1xuXG5lbnVtIEFWQUlMQUJMRV9UUkFOU0ZPUk1TIHtcbiAgU0VOVFJZID0gJ1NFTlRSWScsXG4gIFNMQUNLID0gJ1NMQUNLJyxcbiAgQ09OU09MRSA9ICdDT05TT0xFJyxcbn1cblxuY29uc3Qgd2luc3RvbiA9IHtcbiAgY3JlYXRlOiAoY29uZmlncz86IFdpbnN0b25UcmFuc3BvcnRDb25maWdbXSwgZGVmYXVsdE1ldGE6IGFueSA9IHt9KTogTG9nZ2VyID0+IHtcbiAgICBjb25zdCB0cmFuc3BvcnRzOiBhbnkgPSBbXVxuICAgIGNvbnN0IGV4Y2VwdGlvbkhhbmRsZXJzOiBhbnkgPSBbXVxuICAgIGNvbmZpZ3MgPSBjb25maWdzIHx8IFtdXG5cbiAgICBmb3IgKGNvbnN0IHRyVHlwZSBvZiBPYmplY3Qua2V5cyhBVkFJTEFCTEVfVFJBTlNGT1JNUykpIHtcbiAgICAgIGNvbnN0IGNmZyA9IGNvbmZpZ3MuZmluZChvID0+IG8udHJhbnNwb3J0VHlwZSA9PT0gdHJUeXBlKVxuICAgICAgaWYgKCFjZmcpIGNvbnRpbnVlXG5cbiAgICAgIGxldCBuZXdUcmFuc2Zvcm1cbiAgICAgIHN3aXRjaCAoY2ZnLnRyYW5zcG9ydFR5cGUpIHtcbiAgICAgICAgY2FzZSBBVkFJTEFCTEVfVFJBTlNGT1JNUy5TRU5UUlk6XG4gICAgICAgICAgbmV3VHJhbnNmb3JtID0gc2VudHJ5VHJhbnNwb3J0LmNyZWF0ZShjZmcub3B0aW9ucywgZGVmYXVsdE1ldGEpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBBVkFJTEFCTEVfVFJBTlNGT1JNUy5TTEFDSzpcbiAgICAgICAgICBuZXdUcmFuc2Zvcm0gPSBzbGFja1RyYW5zcG9ydC5jcmVhdGUoY2ZnLm9wdGlvbnMpXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSBBVkFJTEFCTEVfVFJBTlNGT1JNUy5DT05TT0xFOlxuICAgICAgICAgIG5ld1RyYW5zZm9ybSA9IGNvbnNvbGVUcmFuc3BvcnQuY3JlYXRlKGNmZy5vcHRpb25zKVxuICAgICAgICAgIGV4Y2VwdGlvbkhhbmRsZXJzLnB1c2gobmV3VHJhbnNmb3JtKVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgY29udGludWVcbiAgICAgIH1cbiAgICAgIHRyYW5zcG9ydHMucHVzaChuZXdUcmFuc2Zvcm0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGNyZWF0ZUxvZ2dlcih7XG4gICAgICB0cmFuc3BvcnRzLFxuICAgICAgZXhjZXB0aW9uSGFuZGxlcnMsXG4gICAgICBkZWZhdWx0TWV0YSxcbiAgICB9KVxuICB9LFxufVxuZXhwb3J0IHsgd2luc3RvbiwgQVZBSUxBQkxFX1RSQU5TRk9STVN9XG4iXX0=