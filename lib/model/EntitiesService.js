"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EntitiesDao_1 = require("./EntitiesDao");
class EntitiesService {
    constructor(model) {
        this.getById = async (session, id, t) => {
            return this.ModelDao.getById(session, id, t);
        };
        this.getAll = async (session, t) => {
            return this.ModelDao.getAll(session, t);
        };
        this.save = async (session, entity, t) => {
            if (entity.delete) {
                if (!entity.id)
                    return undefined;
                return await this.ModelDao.deleteBy(session, entity.id, t);
            }
            else if (entity.id) {
                return await this.ModelDao.update(session, entity.id, entity, t);
            }
            else {
                return await this.ModelDao.insert(session, entity, t);
            }
        };
        // FIXME userData undefined
        this.insert = async (session, entity, t) => {
            return this.ModelDao.insert(session, entity, t);
        };
        this.saveBulk = async (session, data, t) => {
            const results = [];
            for (const entity of data) {
                results.push(await this.save(session, entity, t));
            }
            return results;
        };
        this.update = async (session, id, entity, t) => {
            return this.ModelDao.update(session, id, entity, t);
        };
        this.deleteBy = (session, entityOrId, t) => {
            return this.ModelDao.deleteBy(session, entityOrId, t);
        };
        this.getWhere = async (session, where, t) => {
            return this.ModelDao.getWhere(session, where, t);
        };
        this.ModelDao = new EntitiesDao_1.EntitiesDao(model);
    }
}
exports.EntitiesService = EntitiesService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW50aXRpZXNTZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL21vZGVsL0VudGl0aWVzU2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLCtDQUEyQztBQUUzQyxNQUFhLGVBQWU7SUFHMUIsWUFBWSxLQUFLO1FBSVYsWUFBTyxHQUFHLEtBQUssRUFBRSxPQUFnQixFQUFFLEVBQVUsRUFBRSxDQUFlLEVBQWdCLEVBQUU7WUFDckYsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFBO1FBQzlDLENBQUMsQ0FBQTtRQUVNLFdBQU0sR0FBRyxLQUFLLEVBQUUsT0FBZ0IsRUFBRSxDQUFlLEVBQWtCLEVBQUU7WUFDMUUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDekMsQ0FBQyxDQUFBO1FBRU0sU0FBSSxHQUFHLEtBQUssRUFBRSxPQUFnQixFQUFFLE1BQVcsRUFBRSxDQUFlLEVBQWdCLEVBQUU7WUFDbkYsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFO2dCQUNqQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUU7b0JBQUUsT0FBTyxTQUFTLENBQUE7Z0JBQ2hDLE9BQU8sTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQTthQUMzRDtpQkFBTSxJQUFJLE1BQU0sQ0FBQyxFQUFFLEVBQUU7Z0JBQ3BCLE9BQU8sTUFBTSxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDakU7aUJBQU07Z0JBQ0wsT0FBTyxNQUFNLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUE7YUFDdEQ7UUFDSCxDQUFDLENBQUE7UUFFRCwyQkFBMkI7UUFDcEIsV0FBTSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBVyxFQUFFLENBQWUsRUFBZ0IsRUFBRTtZQUM1RSxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDakQsQ0FBQyxDQUFBO1FBRU0sYUFBUSxHQUFHLEtBQUssRUFBRSxPQUFnQixFQUFFLElBQVcsRUFBRSxDQUFlLEVBQWtCLEVBQUU7WUFDekYsTUFBTSxPQUFPLEdBQVUsRUFBRSxDQUFBO1lBRXpCLEtBQUssTUFBTSxNQUFNLElBQUksSUFBSSxFQUFFO2dCQUN6QixPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7YUFDbEQ7WUFDRCxPQUFPLE9BQU8sQ0FBQTtRQUNoQixDQUFDLENBQUE7UUFFTSxXQUFNLEdBQUcsS0FBSyxFQUFFLE9BQWdCLEVBQUUsRUFBVSxFQUFFLE1BQVcsRUFBRSxDQUFlLEVBQWdCLEVBQUU7WUFDakcsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUNyRCxDQUFDLENBQUE7UUFFTSxhQUFRLEdBQUcsQ0FBQyxPQUFnQixFQUFFLFVBQXdCLEVBQUUsQ0FBZSxFQUFpQixFQUFFO1lBQy9GLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQTtRQUN2RCxDQUFDLENBQUE7UUFFTSxhQUFRLEdBQUcsS0FBSyxFQUFFLE9BQWdCLEVBQUUsS0FBVSxFQUFFLENBQWUsRUFBa0IsRUFBRTtZQUN4RixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUE7UUFDbEQsQ0FBQyxDQUFBO1FBOUNDLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSx5QkFBVyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ3hDLENBQUM7Q0E4Q0Y7QUFuREQsMENBbURDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHJhbnNhY3Rpb24gfSBmcm9tICdzZXF1ZWxpemUnXG5pbXBvcnQgeyBTZXNzaW9uIH0gZnJvbSAnLi4vdXRpbC9jdXN0b21UeXBpbmdzJ1xuaW1wb3J0IHsgRW50aXRpZXNEYW8gfSBmcm9tICcuL0VudGl0aWVzRGFvJ1xuXG5leHBvcnQgY2xhc3MgRW50aXRpZXNTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBNb2RlbERhbzogRW50aXRpZXNEYW9cblxuICBjb25zdHJ1Y3Rvcihtb2RlbCkge1xuICAgIHRoaXMuTW9kZWxEYW8gPSBuZXcgRW50aXRpZXNEYW8obW9kZWwpXG4gIH1cblxuICBwdWJsaWMgZ2V0QnlJZCA9IGFzeW5jIChzZXNzaW9uOiBTZXNzaW9uLCBpZDogbnVtYmVyLCB0PzogVHJhbnNhY3Rpb24pOiBQcm9taXNlPGFueT4gPT4ge1xuICAgIHJldHVybiB0aGlzLk1vZGVsRGFvLmdldEJ5SWQoc2Vzc2lvbiwgaWQsIHQpXG4gIH1cblxuICBwdWJsaWMgZ2V0QWxsID0gYXN5bmMgKHNlc3Npb246IFNlc3Npb24sIHQ/OiBUcmFuc2FjdGlvbik6IFByb21pc2U8YW55W10+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5Nb2RlbERhby5nZXRBbGwoc2Vzc2lvbiwgdClcbiAgfVxuXG4gIHB1YmxpYyBzYXZlID0gYXN5bmMgKHNlc3Npb246IFNlc3Npb24sIGVudGl0eTogYW55LCB0PzogVHJhbnNhY3Rpb24pOiBQcm9taXNlPGFueT4gPT4ge1xuICAgIGlmIChlbnRpdHkuZGVsZXRlKSB7XG4gICAgICBpZiAoIWVudGl0eS5pZCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuTW9kZWxEYW8uZGVsZXRlQnkoc2Vzc2lvbiwgZW50aXR5LmlkLCB0KVxuICAgIH0gZWxzZSBpZiAoZW50aXR5LmlkKSB7XG4gICAgICByZXR1cm4gYXdhaXQgdGhpcy5Nb2RlbERhby51cGRhdGUoc2Vzc2lvbiwgZW50aXR5LmlkLCBlbnRpdHksIHQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBhd2FpdCB0aGlzLk1vZGVsRGFvLmluc2VydChzZXNzaW9uLCBlbnRpdHksIHQpXG4gICAgfVxuICB9XG5cbiAgLy8gRklYTUUgdXNlckRhdGEgdW5kZWZpbmVkXG4gIHB1YmxpYyBpbnNlcnQgPSBhc3luYyAoc2Vzc2lvbiwgZW50aXR5OiBhbnksIHQ/OiBUcmFuc2FjdGlvbik6IFByb21pc2U8YW55PiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuTW9kZWxEYW8uaW5zZXJ0KHNlc3Npb24sIGVudGl0eSwgdClcbiAgfVxuXG4gIHB1YmxpYyBzYXZlQnVsayA9IGFzeW5jIChzZXNzaW9uOiBTZXNzaW9uLCBkYXRhOiBhbnlbXSwgdD86IFRyYW5zYWN0aW9uKTogUHJvbWlzZTxhbnlbXT4gPT4ge1xuICAgIGNvbnN0IHJlc3VsdHM6IGFueVtdID0gW11cblxuICAgIGZvciAoY29uc3QgZW50aXR5IG9mIGRhdGEpIHtcbiAgICAgIHJlc3VsdHMucHVzaChhd2FpdCB0aGlzLnNhdmUoc2Vzc2lvbiwgZW50aXR5LCB0KSlcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdHNcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGUgPSBhc3luYyAoc2Vzc2lvbjogU2Vzc2lvbiwgaWQ6IG51bWJlciwgZW50aXR5OiBhbnksIHQ/OiBUcmFuc2FjdGlvbik6IFByb21pc2U8YW55PiA9PiB7XG4gICAgcmV0dXJuIHRoaXMuTW9kZWxEYW8udXBkYXRlKHNlc3Npb24sIGlkLCBlbnRpdHksIHQpXG4gIH1cblxuICBwdWJsaWMgZGVsZXRlQnkgPSAoc2Vzc2lvbjogU2Vzc2lvbiwgZW50aXR5T3JJZDogbnVtYmVyIHwgYW55LCB0PzogVHJhbnNhY3Rpb24pOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5Nb2RlbERhby5kZWxldGVCeShzZXNzaW9uLCBlbnRpdHlPcklkLCB0KVxuICB9XG5cbiAgcHVibGljIGdldFdoZXJlID0gYXN5bmMgKHNlc3Npb246IFNlc3Npb24sIHdoZXJlOiBhbnksIHQ/OiBUcmFuc2FjdGlvbik6IFByb21pc2U8YW55W10+ID0+IHtcbiAgICByZXR1cm4gdGhpcy5Nb2RlbERhby5nZXRXaGVyZShzZXNzaW9uLCB3aGVyZSwgdClcbiAgfVxufVxuIl19