"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const amqplib_1 = require("amqplib");
class MQ {
    static async getConn() {
        if (!MQ._conn) {
            MQ._conn = await amqplib_1.connect(`amqp://${encodeURIComponent(MQ.user)}:${encodeURIComponent(MQ.pass)}@${MQ.host}/${MQ.vhost}`);
            MQ._conn.on('close', () => (MQ._conn = null));
        }
        return MQ._conn;
    }
    static async getCh() {
        if (!MQ._ch) {
            const conn = await MQ.getConn();
            MQ._ch = await conn.createChannel();
            MQ._ch.on('close', () => (MQ._ch = null));
        }
        return MQ._ch;
    }
    static async getEx() {
        if (!MQ._ex) {
            const ch = await MQ.getCh();
            MQ._ex = await ch.assertExchange(MQ.defaultExchangeName, 'topic', { durable: true });
        }
        return MQ._ex;
    }
    /**
     * Consume message received to the queue assigned to this service
     * use
     * mq.consume( async (msg, data) => {
     *  ...
     *  (await mq.getCh).ack(msg);
     * });
     * @param onMessage(msg, data?) contains original message and data if it could be parsed to JSON
     * @param options
     */
    static async consume(onMessage, options) {
        return await (await MQ.getCh()).consume(MQ.receiveQueueName, (msg) => {
            let data;
            try {
                data = JSON.parse(msg.content.toString());
            }
            catch (err) {
                global.logger.error(`RMQ message could not be parsed to json object: ${err}`);
            }
            onMessage(msg, data);
        }, options);
    }
    /**
     * Bind queue to exchange
     * ...bindings
     * mq.receive.bindQueue('parser.html.diff-notifier', [(await mq.getEx).exchange]);
     * ...
     * @param pattern Route path <serviceName>.<action>.<option1>.<option2>
     * @param exchangeSource (optional)
     * @param args (optional)
     */
    static async bindQueue(pattern, exchangeSource, args) {
        exchangeSource = exchangeSource || (await MQ.getEx()).exchange;
        return await (await MQ.getCh()).bindQueue(MQ.receiveQueueName, exchangeSource, pattern, args);
    }
    /**
     * Push messages to RMQ
     * use
     * mq.send.publish('action.option1', content);
     *
     * @param routingKey Route key which is automatically prefixed with service name <action>.<option1>.<option2>
     * @param content can be object or buffer
     * @param options
     */
    static async publish(routingKey, content, options) {
        if (!Buffer.isBuffer(content))
            content = new Buffer(JSON.stringify(content));
        return (await MQ.getCh()).publish((await MQ.getEx()).exchange, `${global.projectName.toLowerCase()}.${routingKey}`, content, options);
    }
    static async init(config) {
        MQ.user = config.rabbitMqUser;
        MQ.pass = config.rabbitMqPass;
        MQ.host = config.rabbitMqHost;
        MQ.vhost = config.rabbitMqVhost;
        MQ.receiveQueueName = config.receiveQueueName;
        MQ.defaultExchangeName = config.defaultExchangeName;
        // TODO get connection, on error set timeout and try again
        await MQ.getEx();
        const ch = await MQ.getCh();
        await ch.assertQueue(MQ.receiveQueueName);
        await ch.prefetch(1);
    }
}
exports.MQ = MQ;
//# sourceMappingURL=data:application/json;base64,